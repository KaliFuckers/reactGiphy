{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/helpers.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","GifGridItem","title","url","id","className","style","maxWidth","minWidth","backgroundSize","height","width","src","alt","padding","handleFetchGif","category","a","encodeURI","fetch","response","json","data","filteredData","map","fil","images","downsized_medium","GifGrid","loading","state","setState","useEffect","getGifs","useFetchGifs","console","log","GifExpertApp","categories","setcategories","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"yLAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAehD,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAUP,GAAV,mBAAwBO,OACtCN,EAAc,MAKhB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAdrB,SAACP,GACpBF,EAAcE,EAAEQ,OAAOF,aCEZG,EATK,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,MAAWC,GAAS,EAAbC,GAAa,EAATD,KAC/B,OACE,sBAAKE,UAAU,yCAAyCC,MAAO,CAACC,SAAU,QAASC,SAAU,SAA7F,UACE,qBAAKF,MAAO,CAACG,eAAgB,QAASC,OAAO,SAAUC,MAAM,OAAOC,IAAKT,EAAKU,IAAKX,IACnF,mBAAGI,MAAO,CAACQ,QAAQ,YAAnB,SAAiCZ,Q,uBCJ1Ba,EAAc,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACtBd,EADsB,iDAEgBe,UAAUF,GAF1B,+DAGLG,MAAMhB,GAHD,cAGtBiB,EAHsB,gBAILA,EAASC,OAJJ,uBAIpBC,EAJoB,EAIpBA,KACFC,EAAeD,EAAKE,KAAI,SAACC,GAAS,IAAD,EACrC,MAAO,CACLrB,GAAIqB,EAAIrB,GACRF,MAAOuB,EAAIvB,MACXC,IAAG,UAAEsB,EAAIC,cAAN,aAAE,EAAYC,iBAAiBxB,QATV,kBAYrBoB,GAZqB,4CAAH,sDCIdK,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACd5B,mBAAS,CACjCkC,KAAM,GACNO,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAsBxC,OAhBAC,qBAAU,YACK,uCAAG,4BAAAf,EAAA,6DACdc,GAAS,SAAAD,GACP,MAAO,CAACR,KAAMQ,EAAMR,KAAMO,SAAS,MAFvB,SAIKd,EAAeC,GAJpB,OAIRM,EAJQ,OAKdS,GAAS,SAAAD,GACP,MAAO,CACLD,SAAS,EACTP,WARU,2CAAH,oDAYbW,KACC,CAACjB,IAEGc,EDpBmBI,CAAalB,GAA/BM,EAD+B,EAC/BA,KAAMO,EADyB,EACzBA,QAEd,OADAM,QAAQC,IAAId,GAEV,gCACE,oBAAIjB,UAAU,oCAAd,SAAmDW,IACnD,oBAAIX,UAAU,YAAd,SACGwB,EACG,cACAP,EAAKE,KAAI,gBAAGpB,EAAH,EAAGA,GAAIF,EAAP,EAAOA,MAAOC,EAAd,EAAcA,IAAd,OACP,cAAC,EAAD,CAAsBD,MAAOA,EAAOC,IAAKA,GAAvBC,YEIjBiC,EAfM,WAAO,IAAD,EACWjD,mBAAS,CAAC,KADrB,mBAClBkD,EADkB,KACNC,EADM,KAGzB,OACE,qCACE,+CACA,cAAC,EAAD,CAAapD,cAAeoD,IAC5B,uBACCD,EAAWd,KAAI,SAAC5B,GAAD,OACd,cAAC,EAAD,CAAmBoB,SAAUpB,GAAfA,UCAP4C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCCdQ,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,SAK1DZ,M","file":"static/js/main.6f7bc21f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  const handleChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((cat) => [inputValue,...cat]);\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" value={inputValue} onChange={handleChange} />\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n","const GifGridItem = ({title, id, url}) => {\r\n  return(\r\n    <div className=\"card animate__animated animate__fadeIn\" style={{maxWidth: \"200px\", minWidth: \"100px\"}}>\r\n      <img style={{backgroundSize: \"cover\", height:\"200px\"}} width=\"100%\" src={url} alt={title}/>\r\n      <p style={{padding:\"0px 10px\"}}>{title}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GifGridItem;","export const handleFetchGif = async (category) => {\r\n  const url =\r\n    `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&api_key=zvFrwigXDCJWXzWakMTNT6MalRQwjRlw&limit=10`;\r\n  const response = await fetch(url);\r\n  const { data } = await response.json();\r\n  const filteredData = data.map((fil) => {\r\n    return {\r\n      id: fil.id,\r\n      title: fil.title,\r\n      url: fil.images?.downsized_medium.url,\r\n    };\r\n  });\r\n  return filteredData;\r\n};\r\n","import PropTypes from \"prop-types\";\r\nimport GifGridItem from \"./GifGridItem\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  const { data, loading } = useFetchGifs(category);\r\n  console.log(data);\r\n  return (\r\n    <div>\r\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n      <ol className=\"card-grid\">\r\n        {loading\r\n          ? \"Cargando...\"\r\n          : data.map(({ id, title, url }) => (\r\n              <GifGridItem key={id} title={title} url={url} />\r\n            ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n\r\nGifGrid.propTypes = {\r\n  category: PropTypes.string.isRequired,\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { handleFetchGif } from \"../helpers/helpers\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: false,\r\n  });\r\n\r\n  useEffect(() => {\r\n    const getGifs = async () => {\r\n      setState(state => {\r\n        return {data: state.data, loading: true}\r\n      });\r\n      const data = await handleFetchGif(category);\r\n      setState(state => {\r\n        return {\r\n          loading: false,\r\n          data\r\n        }\r\n      });\r\n    };\r\n    getGifs();\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\nconst GifExpertApp = () => {\r\n  const [categories, setcategories] = useState([\"\"]);\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertAppp</h2>\r\n      <AddCategory setCategories={setcategories} />\r\n      <hr />\r\n      {categories.map((cat) => (\r\n        <GifGrid key={cat} category={cat} />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport '../node_modules/animate.css/animate.min.css';\nimport \"./index.css\";\n\nimport GifExpertApp from './GifExpertApp';\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}